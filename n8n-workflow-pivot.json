{
  "name": "Financial Processor - Pivot Format",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "process-financials",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [100, 300],
      "webhookId": "process-financials"
    },
    {
      "parameters": {
        "jsCode": "// Fix binary field name\nconst items = $input.all();\n\nitems.forEach(item => {\n  if (item.binary) {\n    const binaryKeys = Object.keys(item.binary);\n    if (binaryKeys.length > 0 && !item.binary.data) {\n      item.binary.data = item.binary[binaryKeys[0]];\n    }\n  }\n});\n\nreturn items;"
      },
      "id": "fix-binary",
      "name": "Fix Binary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [250, 300]
    },
    {
      "parameters": {
        "operation": "spreadsheetFile",
        "binaryPropertyName": "data",
        "options": {
          "includeEmptyCells": false,
          "headerRow": false,
          "readAsString": true,
          "rawData": true
        }
      },
      "id": "read-excel",
      "name": "Read Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [400, 300]
    },
    {
      "parameters": {
        "jsCode": "// Transform pivot-style Excel data to standardized format\nconst items = $input.all();\nlet allTransformedData = [];\n\n// Helper to convert Excel serial date to readable date\nfunction excelDateToJS(serial) {\n  if (!serial || isNaN(serial)) return null;\n  const date = new Date((serial - 25569) * 86400 * 1000);\n  return date;\n}\n\n// Helper to format date\nfunction formatDate(date) {\n  if (!date) return '';\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const year = date.getFullYear();\n  return `${month}/${day}/${year}`;\n}\n\n// Helper to get month name\nfunction getMonthName(date) {\n  if (!date) return '';\n  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  return months[date.getMonth()];\n}\n\nitems.forEach((item, fileIndex) => {\n  const fileName = item.binary?.data?.fileName || `File ${fileIndex + 1}`;\n  const isBalanceSheet = fileName.toLowerCase().includes('balance');\n  const statementType = isBalanceSheet ? 'Balance Sheet' : 'Income Statement';\n  \n  console.log(`\\nProcessing ${fileName} as ${statementType}`);\n  \n  const data = item.json;\n  \n  if (!data || typeof data !== 'object') {\n    console.log('No data found');\n    return;\n  }\n  \n  // Get all rows (each row is an account)\n  const rows = Object.entries(data);\n  \n  // Find the header row (usually has dates as serial numbers)\n  let dateColumns = [];\n  let headerRow = null;\n  \n  // Look for the Chart of Accounts row to identify date columns\n  for (const [key, row] of rows) {\n    if (row['Income Statement'] === 'Chart Of Accounts' || \n        row['Income Statement'] === 'Chart of Accounts') {\n      // Found header row - extract date columns\n      headerRow = row;\n      break;\n    }\n  }\n  \n  // Extract date columns from __EMPTY_7 onwards (these are Excel serial dates)\n  if (headerRow) {\n    for (let i = 7; i <= 30; i++) {\n      const colName = i === 7 ? '__EMPTY_7' : `__EMPTY_${i}`;\n      if (headerRow[colName]) {\n        const excelSerial = parseFloat(headerRow[colName]);\n        if (!isNaN(excelSerial)) {\n          const date = excelDateToJS(excelSerial);\n          if (date) {\n            dateColumns.push({\n              column: colName,\n              date: date,\n              formatted: formatDate(date),\n              monthYear: `${getMonthName(date)} ${date.getFullYear()}`,\n              year: date.getFullYear().toString(),\n              month: (date.getMonth() + 1).toString()\n            });\n          }\n        }\n      }\n    }\n  }\n  \n  console.log(`Found ${dateColumns.length} date columns`);\n  \n  // Process each data row\n  rows.forEach(([rowKey, row]) => {\n    // Skip header rows and empty rows\n    if (!row['Income Statement'] || \n        row['Income Statement'] === 'Chart Of Accounts' ||\n        row['Income Statement'] === 'Chart of Accounts' ||\n        row['Income Statement'] === 'End Date' ||\n        row['Income Statement'] === 'Balance Check') {\n      return;\n    }\n    \n    const accountName = row['Income Statement'];\n    const accountCode = row['__EMPTY'] || '';\n    \n    // Determine parent account based on account name\n    let parentAccount = accountName;\n    if (accountName.includes('Revenue')) parentAccount = 'Revenue';\n    else if (accountName.includes('COGS') || accountName.includes('Cost')) parentAccount = 'COGS';\n    else if (accountName.includes('Expense')) parentAccount = 'Operating Expenses';\n    else if (accountName.includes('Cash')) parentAccount = 'Cash & Cash Equivalents';\n    else if (accountName.includes('Receivable')) parentAccount = 'Accounts Receivable';\n    else if (accountName.includes('Inventory')) parentAccount = 'Inventory';\n    else if (accountName.includes('Asset')) parentAccount = 'Assets';\n    else if (accountName.includes('Payable')) parentAccount = 'Liabilities';\n    else if (accountName.includes('Debt')) parentAccount = 'Liabilities';\n    else if (accountName.includes('Equity') || accountName.includes('Stock')) parentAccount = 'Equity';\n    \n    // Process each date column\n    dateColumns.forEach(dateCol => {\n      const value = row[dateCol.column];\n      if (value !== undefined && value !== null && value !== '') {\n        // Format value as currency\n        let formattedValue = '';\n        if (typeof value === 'number') {\n          const isNegative = value < 0;\n          const absValue = Math.abs(value);\n          formattedValue = isNegative ? \n            `-$${absValue.toLocaleString()}` : \n            `$${absValue.toLocaleString()}`;\n        } else {\n          formattedValue = value.toString();\n        }\n        \n        allTransformedData.push({\n          \"Date Concat\": dateCol.monthYear,\n          \"Year\": dateCol.year,\n          \"Month\": dateCol.month,\n          \"Financial Statements\": statementType,\n          \"Parent Account\": parentAccount,\n          \"Account\": accountName,\n          \"Attribute\": dateCol.formatted,\n          \"Value\": formattedValue\n        });\n      }\n    });\n  });\n});\n\nconsole.log(`Transformed ${allTransformedData.length} data points`);\n\n// Return as JSON string\nreturn [{json: {data: JSON.stringify(allTransformedData)}}];"
      },
      "id": "transform",
      "name": "Transform Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [550, 300]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.data }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "respond",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [700, 300]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Fix Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix Binary": {
      "main": [
        [
          {
            "node": "Read Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Excel": {
      "main": [
        [
          {
            "node": "Transform Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Data": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "pivot-v1",
  "id": "financial-processor-pivot",
  "tags": []
}