{
  "name": "Financial Processor - Fixed Transform",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "process-financials",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [100, 300],
      "webhookId": "process-financials"
    },
    {
      "parameters": {
        "jsCode": "// Fix binary field\nconst items = $input.all();\nitems.forEach(item => {\n  if (item.binary) {\n    const binaryKeys = Object.keys(item.binary);\n    if (binaryKeys.length > 0 && !item.binary.data) {\n      item.binary.data = item.binary[binaryKeys[0]];\n    }\n  }\n});\nreturn items;"
      },
      "id": "fix-binary",
      "name": "Fix Binary",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [250, 300]
    },
    {
      "parameters": {
        "operation": "spreadsheetFile",
        "binaryPropertyName": "data",
        "options": {
          "includeEmptyCells": true,
          "headerRow": true,
          "readAsString": true
        }
      },
      "id": "read-excel",
      "name": "Read Excel",
      "type": "n8n-nodes-base.spreadsheetFile",
      "typeVersion": 2,
      "position": [400, 300]
    },
    {
      "parameters": {
        "jsCode": "// Transform the financial data\nconst items = $input.all();\nlet allResults = [];\n\n// Excel date conversion\nfunction excelDateToJS(serial) {\n  const date = new Date((serial - 25569) * 86400 * 1000);\n  return date;\n}\n\nfunction formatMonthYear(date) {\n  const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n  return `${months[date.getMonth()]} ${date.getFullYear()}`;\n}\n\nitems.forEach((item, idx) => {\n  const fileName = item.binary?.data?.fileName || '';\n  const isBalance = fileName.toLowerCase().includes('balance');\n  const statementType = isBalance ? 'Balance Sheet' : 'Income Statement';\n  \n  console.log(`Processing ${fileName}`);\n  \n  const data = item.json;\n  if (!Array.isArray(data)) {\n    console.log('Data is not array');\n    return;\n  }\n  \n  // Find header row with dates\n  let dateRow = null;\n  let dateColumns = [];\n  \n  for (let row of data) {\n    // Look for Chart Of Accounts row which has the dates\n    if (row['Income Statement'] === 'Chart Of Accounts' || \n        row['__EMPTY'] === 'Code') {\n      // Next columns after the headers contain dates as Excel serials\n      const keys = Object.keys(row);\n      keys.forEach(key => {\n        if (key.startsWith('__EMPTY_') && key !== '__EMPTY_1' && key !== '__EMPTY_2' && \n            key !== '__EMPTY_4' && key !== '__EMPTY_5') {\n          const val = parseFloat(row[key]);\n          if (val > 40000 && val < 50000) { // Excel date range\n            const date = excelDateToJS(val);\n            dateColumns.push({\n              key: key,\n              date: date,\n              monthYear: formatMonthYear(date),\n              month: (date.getMonth() + 1).toString(),\n              year: date.getFullYear().toString(),\n              formatted: `${date.getMonth()+1}/${date.getDate()}/${date.getFullYear()}`\n            });\n          }\n        }\n      });\n      console.log(`Found ${dateColumns.length} date columns`);\n      break;\n    }\n  }\n  \n  // Process data rows\n  data.forEach(row => {\n    const accountName = row['Income Statement'];\n    const accountCode = row['__EMPTY'];\n    \n    // Skip non-data rows\n    if (!accountName || \n        accountName === 'Chart Of Accounts' || \n        accountName === 'Income Statement' ||\n        accountName === 'Start Date' ||\n        accountName === 'End Date' ||\n        accountName === 'Balance Check' ||\n        accountName.includes('Number of Accounts')) {\n      return;\n    }\n    \n    // Determine parent account\n    let parentAccount = accountName;\n    if (accountName.includes('Revenue')) parentAccount = 'Revenue';\n    else if (accountName.includes('COGS') || accountName.includes('Direct Materials') || \n             accountName.includes('Direct Labor')) parentAccount = 'COGS';\n    else if (accountName.includes('Expense')) parentAccount = 'Operating Expenses';\n    else if (accountName.includes('Gross Profit')) parentAccount = 'Gross Profit';\n    else if (accountName.includes('Net Income')) parentAccount = 'Net Income';\n    else if (accountName.includes('Cash')) parentAccount = 'Cash & Cash Equivalents';\n    else if (accountName.includes('Receivable')) parentAccount = 'Accounts Receivable';\n    else if (accountName.includes('Inventory')) parentAccount = 'Inventory';\n    else if (accountName.includes('Asset')) parentAccount = 'Assets';\n    else if (accountName.includes('Liabilities')) parentAccount = 'Liabilities';\n    else if (accountName.includes('Payable')) parentAccount = 'Current Liabilities';\n    else if (accountName.includes('Debt')) parentAccount = 'Liabilities';\n    else if (accountName.includes('Stock') || accountName.includes('Equity')) parentAccount = 'Equity';\n    \n    // Process each date column\n    dateColumns.forEach(col => {\n      const value = row[col.key];\n      if (value !== undefined && value !== null && value !== '') {\n        let formattedValue = '';\n        const numVal = parseFloat(value);\n        if (!isNaN(numVal)) {\n          const isNeg = numVal < 0;\n          const abs = Math.abs(numVal);\n          formattedValue = isNeg ? `-$${abs.toLocaleString()}` : `$${abs.toLocaleString()}`;\n        } else {\n          formattedValue = String(value);\n        }\n        \n        allResults.push({\n          \"Date Concat\": col.monthYear,\n          \"Year\": col.year,\n          \"Month\": col.month,\n          \"Financial Statements\": statementType,\n          \"Parent Account\": parentAccount,\n          \"Account\": accountName,\n          \"Attribute\": col.formatted,\n          \"Value\": formattedValue\n        });\n      }\n    });\n  });\n});\n\nconsole.log(`Total rows: ${allResults.length}`);\nreturn [{json: {data: JSON.stringify(allResults)}}];"
      },
      "id": "transform",
      "name": "Transform",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [550, 300]
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={{ $json.data }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Access-Control-Allow-Origin",
                "value": "*"
              },
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "id": "respond",
      "name": "Respond",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [700, 300]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Fix Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fix Binary": {
      "main": [
        [
          {
            "node": "Read Excel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Excel": {
      "main": [
        [
          {
            "node": "Transform",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fixed-v2",
  "id": "financial-processor-fixed",
  "tags": []
}